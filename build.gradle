import java.nio.charset.StandardCharsets

group group
version version

apply plugin: 'java'
apply plugin: 'idea'    // Optional using for IntelliJ IDEA
apply plugin: 'io.qameta.allure'

ext {
    encoding = StandardCharsets.UTF_8.name()
}

[compileJava, compileTestJava]*.sourceCompatibility = 1.8
[compileJava, compileTestJava]*.targetCompatibility = 1.8
[compileJava, compileTestJava]*.options.collect { options -> options.debug = true }
[compileJava, compileTestJava]*.options.collect { options -> options.encoding = encoding }

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    implementation('com.codeborne:selenide:5.11.1')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.2')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.6.2')
    testImplementation('org.junit.vintage:junit-vintage-engine:5.6.2')
    testImplementation('org.junit.platform:junit-platform-runner:1.6.2')
    testImplementation('io.qameta.allure:allure-junit5:2.13.3')
    testImplementation('io.qameta.allure:allure-selenide:2.13.3')
    implementation 'com.github.automatedowl:allure-environment-writer:1.0.0'
    implementation('org.slf4j:slf4j-api:1.7.30')
    testImplementation('org.slf4j:slf4j-log4j12:1.7.30')
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.8.1"
    }
}

/*
* Allure Configuration
*/
allure {
    version = '2.13.3'
    aspectjweaver = true
    autoconfigure = false
    aspectjVersion = '1.9.1'
    useJUnit5 { version = '2.13.3' }
}

tasks.withType(Test) {

    useJUnitPlatform() {
        /*
        * Filter by engines
        */
        includeEngines 'junit-jupiter'
        //excludeEngines 'junit-vintage'

        /*
        * Filter by tags
        */
        //includeTags 'fast', 'smoke'
        //excludeTags 'slow', 'ci'
    }
    ignoreFailures = true

    outputs.upToDateWhen { false }

    testLogging.showStandardStreams = true

    testLogging { events 'passed', 'skipped', 'failed' }

    systemProperty('file.encoding', encoding)

    systemProperty('BUILD_URL', System.getenv()['BUILD_URL'])

    systemProperties = System.getProperties() as Map<String, ?>
}
